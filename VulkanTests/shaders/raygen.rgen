#version 460
#extension GL_EXT_ray_tracing : require

// Define the ray payload structure
struct RayPayload {
    vec3 color;
    float hitT;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

// Binding for the top-level acceleration structure (TLAS)
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

// Camera data
layout(set = 1, binding = 0) uniform CameraData {
    mat4 viewInverse;
    mat4 projInverse;
} camData;

// SSR Mask texture
layout(set = 2, binding = 0) uniform sampler2D ssrMask;

void main() {
    vec2 uv = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy);
    vec3 maskColor = texture(ssrMask, uv).rgb;

    // Initialize the ray payload
    payload.color = vec3(0.0);
    payload.hitT = -1.0;

    // Only shoot rays for pixels with high red value in the SSR mask
    if (maskColor.r > 0.5) {
        vec4 origin = camData.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
        vec4 direction = camData.viewInverse * camData.projInverse * vec4(uv * 2.0 - 1.0, 1.0, 1.0);
        direction.xyz = normalize(direction.xyz);

        // Trace the ray
        traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 1, 0, origin.xyz, 0.01, direction.xyz, 1000.0, 0);
    }
}
